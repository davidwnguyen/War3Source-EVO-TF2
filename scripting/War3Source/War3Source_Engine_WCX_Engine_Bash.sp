// War3Source_Engine_WCX_Engine_Bash.sp

/* Plugin Template generated by Pawn Studio */

//#include <war3source>
//#assert GGAMEMODE == MODE_WAR3SOURCE

new PlayerRace[MAXPLAYERSCUSTOM];
float lastBashTime[MAXPLAYERSCUSTOM];

/*
public Plugin:myinfo =
{
	name = "WCX Bash",
	author = "necavi",
	description = "WCX Bash",
	version = "0.1",
	url = "http://necavi.com"
}*/

public War3Source_Engine_WCX_Engine_Bash_OnPluginStart()
{
	LoadTranslations("w3s.race.humanally.phrases");
}

public War3Source_Engine_Bash_OnWar3EventSpawn(int client)
{
	lastBashTime[client] = 0.0;
}
// modified because W3ChanceModifier() may not work with this:
//public OnWar3EventPostHurt(victim,attacker,damage,const String:weapon[32],bool:isWarcraft){
public void War3Source_Engine_WCX_Engine_Bash_OnWar3EventPostHurt(int victim, int attacker,float damage,char weapon[64],bool isWarcraft){
	//new dmg=RoundToCeil(damage);
	if(StrEqual(weapon, "weapon_additionaldamage") || StrEqual(weapon, "crit") || StrEqual(weapon, "bash") || StrEqual(weapon, "weapon_crit") || StrEqual(weapon, "weapon_bash") || isWarcraft)
		return;
		
	if(IS_PLAYER(victim)&&IS_PLAYER(attacker)&&victim>0&&attacker>0&&attacker!=victim)
	{
		new vteam=GetClientTeam(victim);
		new ateam=GetClientTeam(attacker);
		if(vteam!=ateam)
		{
			new Float:percent = GetBuffSumFloat(attacker,fBashChance);
			if((percent > 0.0) && !Hexed(attacker) && lastBashTime[attacker] + (0.5/percent) < GetGameTime())
			{
				// Bash
				if(War3_Chance(percent * fChanceModifier(attacker)) && !GetBuffHasOneTrue(victim,bBashed) && IsPlayerAlive(attacker))
				{
					if(!W3HasImmunity(victim,Immunity_Skills))
					{
						new race=GetRace(victim);
						PlayerRace[victim] = race;
						SetBuffRace(victim,bBashed,race,true,attacker);
						new newdamage = RoundFloat(GetBuffSumInt(attacker,iBashDamage)*GetBuffStackedFloat(victim,fAbilityResistance));
						if(newdamage>0)
							DealDamage(victim,newdamage,attacker,_,"weapon_bash",_,W3DMGTYPE_PHYSICAL);

						W3FlashScreen(victim,RGBA_COLOR_RED);
						new Float:duration = GetBuffSumFloat(attacker,fBashDuration);
						CreateTimer(duration,UnfreezePlayer,victim);

						PrintHintText(victim,"%T","RcvdBash",victim);
						PrintHintText(attacker,"%T","Bashed",attacker);

						lastBashTime[attacker] = GetGameTime();
					}
					else
					{
						War3_NotifyPlayerImmuneFromSkill(attacker, victim, 0);
					}
				}
			}

		}
	}
}

public Action:UnfreezePlayer(Handle:h,any:victim)
{
	SetBuffRace(victim,bBashed,PlayerRace[victim],false);
}



